<?php
require_once dirname(__FILE__).'/../../ZeninoLoader.php';
ZeninoLoader::register();
/**
 * Test class for ZeninoNoteToolkit.
 * Generated by PHPUnit on 2010-12-27 at 19:09:00.
 */
class ZeninoNoteToolkitTest extends PHPUnit_Framework_TestCase
{
    
    static protected $int_notes = array(
      array(0, 'C'), array(1, 'C#'), array(2, 'D'), array(3, 'D#'),
      array(4, 'E'), array(5, 'F'), array(6, 'F#'), array(7, 'G'),
      array(8, 'G#'), array(9, 'A'), array(10, 'A#'), array(11, 'B')
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new ZeninoNoteToolkit;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @dataProvider intToNoteProvider
     */
    public function testIntToNote($int, $expected)
    {
      $result = ZeninoNoteToolkit::intToNote($int);
      $this->assertEquals($expected, $result);
    }   
    public function intToNoteProvider()
    {
      return self::$int_notes;
    }
    
    /**
     * @dataProvider intToNoteExceptionProvider
     * @expectedException RangeError 
     */
    public function testIntToNoteException($int)
    {
      $this->setExpectedException('RangeError');
      ZeninoNoteToolkit::intToNote($int);
    }
    public static function intToNoteExceptionProvider()
    {
      return array(
        array(-1), array(12)
      );
    }

    /**
     * @dataProvider noteToIntProvider
     */
    public function testNoteToInt($note, $expected)
    {
      $result = ZeninoNoteToolkit::noteToInt($note);
      $this->assertEquals($expected, $result);
      $this->assertInternalType('int', $result);
    }
    /**
     * @dataProvider noteToIntProvider
     */
    public function testNoteToIntReturnsInt($note, $expected)
    {
      $result = ZeninoNoteToolkit::noteToInt($note);
      $this->assertInternalType('int', $result);
    }
    public function noteToIntProvider()
    {
      return array_merge(
        array_map('array_reverse', self::$int_notes),
        array(
          array('D##', 4), array('Bbb', 9), array('G##b#bb', 7),
          array('Dbbb', 11), array('A###', 0)
        )
      );
    }

    /**
     * 
     */
    public function testIsEnharmonic()
    {
      $this->assertTrue(ZeninoNoteToolkit::isEnharmonic('Cb', 'B'));
      $this->assertTrue(ZeninoNoteToolkit::isEnharmonic('Fb', 'D##'));
      $this->assertTrue(ZeninoNoteToolkit::isEnharmonic('Ab##', 'Cbb'));
      $this->assertFalse(ZeninoNoteToolkit::isEnharmonic('C#', 'Bbb'));
      $this->assertFalse(ZeninoNoteToolkit::isEnharmonic('B#b', 'C'));
    }

    /**
     * @dataProvider redundantProvider
     */
    public function testRemoveRedundantAccidentals($note, $expected)
    {
      $result = ZeninoNoteToolkit::removeRedundantAccidentals($note);
      $this->assertEquals($expected, $result);
    }
    public function redundantProvider()
    {
      return array(
        array('C#bb', 'Cb'), array('C#bbb', 'Cbb'),
        array('Gb###b#bb', 'G'), array('Ebbb#bbb#', 'Ebbbb')
      );
    }

    /**
     * @dataProvider augmentProvider
     */
    public function testAugment($note, $expected)
    {
      $result = ZeninoNoteToolkit::augment($note);
      $this->assertEquals($expected, $result);
    }
    public function augmentProvider()
    {
      return array(
        array('C#bb', 'C#b'), array('C#', 'C##'),
        array('Bb', 'B'), array('E', 'E#'), array('F#b#b', 'F#b#')
      );
    }
    
    /**
     * @dataProvider diminishProvider
     */
    public function testDiminish($note, $expected)
    {
      $result = ZeninoNoteToolkit::diminish($note);
      $this->assertEquals($expected, $result);
    }
    public function diminishProvider()
    {
      return array(
        array('C#bb', 'C#bbb'), array('C#', 'C'),
        array('Bb', 'Bbb'), array('E', 'Eb'), array('F#b#b', 'F#b#bb')
      );
    }
    
    /**
     * @dataProvider toMajorProvider
     */
    public function testToMajor($note, $expected)
    {
      $result = ZeninoNoteToolkit::toMajor($note);
      $this->assertEquals($expected, $result);
    }
    public function toMajorProvider()
    {
      return array(
        array('A', 'C'), array('G', 'Bb'),
        array('Ebb', 'Gbb'), array('F###', 'A##')
      );
    }
    
    /**
     * @dataProvider toMinorProvider
     */
    public function testToMinor($note, $expected)
    {
      $result = ZeninoNoteToolkit::toMinor($note);
      $this->assertEquals($expected, $result);
    }
    public function toMinorProvider()
    {
      return array(
        array('C', 'A'), array('Bb', 'G'),
        array('Gbb', 'Ebb'), array('A##', 'F###')
      );
    }
    
    /**
     * @dataProvider isValidNoteProvider
     */
    public function testIsValidNote($note, $expected)
    {
      $result = ZeninoNoteToolkit::isValidNote($note);
      $this->assertEquals($expected, $result);
    }
    public function isValidNoteProvider()
    {
      return array(
        array('Z', false), array('Dz', false),
        array('Bb#', true), array('E', true)
      );
    }

    /**
     * @dataProvider getAccidentalsProvider
     */
    public function testGetAccidentals($note, $expected)
    {
      $result = ZeninoNoteToolkit::getAccidentals($note);
      $this->assertEquals($expected, $result);
    }
    public function getAccidentalsProvider()
    {
      return array(
        array('C', array()), array('D#', array('#')),
        array('Bb#', array('b', '#')), array('D###', array('#','#','#'))
      );
    }
}
?>
